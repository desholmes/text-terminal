(()=>{function t(t){return t&&t.__esModule?t.default:t}var e;e=JSON.parse('{"name":"text-terminal","version":"0.2.0","description":"A simple, extendable terminal interface for the web.","repository":"https://github.com/desholmes/text-terminal","scripts":{"clean":"rm -rf ./dist/*.css ./dist/*.map ./dist/*.js ","start":"npm run clean && parcel --no-cache --lazy ./src/index.html","build":"npm run clean && parcel build ./src/scss/text-terminal.scss && parcel build ./src/modules/textTerminal.js","lint":"prettier --check .","lint-fix":"prettier --write ."},"author":"Des Holmes https://github.com/desholmes","license":"MIT","devDependencies":{"@parcel/transformer-sass":"2.0.0-rc.0","@parcel/transformer-json":"2.0.0-rc.0","prettier":"2.1.2","parcel":"2.0.0-rc.0","sass":"1.42.1"}}');var s={clear:t=>t.clear(),version:s=>{console.log(t(e)),s.output(`Text Terminal v${t(e).version}`)}};class o{#t="TextTerminal";dom={};commands={};history=[];historyCursor=0;prompt;separator;theme;welcome;constructor(t={}){const{containerId:e="text-terminal",commands:o={},prompt:i="",theme:r="dark",welcome:n="Welcome!",separator:a=":"}=t,d=document.getElementById(e);if(!d)throw Error(`Container #${e} does not exist!`);this.commands=Object.assign({},o,s),this.history=localStorage[this.#t]?JSON.parse(localStorage[this.#t]):[],this.historyCursor=this.history.length,this.prompt=i,this.separator=a,this.theme=r,this.welcome=n,this.createDom(d),this.addListeners(),this.welcome&&this.output(this.welcome)}addListeners(){this.dom.output.addEventListener("DOMSubtreeModified",(()=>{setTimeout((()=>this.dom.input.scrollIntoView()),10)}),!1),window&&window.addEventListener("click",(()=>this.dom.input.focus()),!1),this.dom.output.addEventListener("click",(t=>t.stopPropagation()),!1),this.dom.command.addEventListener("click",(()=>this.dom.input.focus()),!1),this.dom.input.addEventListener("keyup",this.onKeyUp,!1),this.dom.input.addEventListener("keydown",this.onKeyDown,!1)}clear(){this.dom.output.innerHTML="",this.resetCommand()}createDom(t){var e,s;t.classList.add(this.#t,this.theme),t.insertAdjacentHTML("beforeEnd",(e=this.prompt,s=this.separator,`\n  <div class="container">\n    <output></output>\n    <div class="command">\n      <div class="prompt">${e}${s}</div>\n      <input class="input" spellcheck="false" autocapitalize="off" autofocus />\n    </div>\n  </div>\n`)),this.dom={container:t.querySelector(".container"),output:t.querySelector("output"),command:t.querySelector(".command"),input:t.querySelector(".command .input"),prompt:t.querySelector(".command .prompt")}}onKeyDown=t=>{const e=this.dom.input.value.trim();if(13!==t.keyCode||!e)return;const[s,...o]=e.split(" ");if(this.history.push(e),localStorage[this.#t]=JSON.stringify(this.history),this.historyCursor=this.history.length,this.dom.output.appendChild((t=>{const e=t.cloneNode(!0),s=e.querySelector(".input");return s.autofocus=!1,s.readOnly=!0,s.insertAdjacentHTML("beforebegin",s.value),s.parentNode.removeChild(s),e.classList.add("line"),e})(this.dom.command)),this.dom.input.value="",Object.keys(this.commands).includes(s)){const t=this.commands[s];t&&t(this,o)}else this.output(`<b>${s}</b>: command not found.`)};onKeyUp=t=>{this.dom.input.focus(),t.stopPropagation(),t.preventDefault(),27===t.keyCode&&(this.dom.input.value="",t.stopPropagation(),t.preventDefault()),38!==t.keyCode&&40!==t.keyCode||(38===t.keyCode&&this.historyCursor>0&&(this.historyCursor-=1),40===t.keyCode&&this.historyCursor<this.history.length-1&&(this.historyCursor-=1),this.history[this.historyCursor]&&(this.dom.input.value=this.history[this.historyCursor]))};output(t="&nbsp;"){this.dom.output.insertAdjacentHTML("beforeEnd",`<span>${t}</span>`),this.resetCommand()}resetCommand=()=>{this.dom.input.value="",this.dom.command.classList.remove("input")}}window&&(window.TextTerminal=o)})();
//# sourceMappingURL=textTerminal.js.map
